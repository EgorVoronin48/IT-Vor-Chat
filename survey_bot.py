from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from typing import Dict
from keyboards import main_menu, get_survey_keyboard

class Survey:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.user_sessions: Dict[int, Dict] = {}

    async def start_survey(self, message: Message):
        try:
            user_id = message.from_user.id
            self.user_sessions[user_id] = {
                "answers": {},
                "current_q": 1,
                "type": "self"
            }
            await self._send_question(user_id)
        except Exception as e:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞")
            print(f"Error in start_survey: {e}")

    async def process_callback(self, callback: CallbackQuery):
        try:
            user_id = callback.from_user.id
            if user_id not in self.user_sessions:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
                return

            data_parts = callback.data.split('_')
            if len(data_parts) < 3:
                await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return

            if data_parts[0] == 'survey':
                _, q_num_str, field, value = data_parts[:4]
            else:
                q_num_str, field, value = data_parts[:3]

            try:
                q_num = int(q_num_str)
            except ValueError:
                await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞")
                return

            session = self.user_sessions[user_id]
            session["answers"][field] = value
            session["current_q"] = q_num + 1

            await callback.message.delete()

            if q_num >= 10:
                await self._complete_survey(user_id, callback.message)
            else:
                await self._send_question(user_id)

        except Exception as e:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            print(f"Error in process_callback: {e}")

    async def _send_question(self, user_id: int):
        session = self.user_sessions.get(user_id)
        if not session:
            return

        current_q = session["current_q"]
        question_text = self._get_question_text(current_q)
        keyboard = get_survey_keyboard(current_q)

        await self.bot.send_message(
            user_id,
            question_text,
            reply_markup=keyboard
        )

    def _get_question_text(self, q_num: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —ç–º–æ–¥–∑–∏"""
        questions = [
            "1. üåà –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            "2. üç¥ –ö–∞–∫–∞—è –∫—É—Ö–Ω—è –∏ –∫–∞–∫–æ–µ –±–ª—é–¥–æ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
            "3. üé• –ö–∞–∫–æ–π —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª —Ç—ã –º–æ–≥ –±—ã –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ?",
            "4. üéß –ü–æ–¥ –∫–∞–∫—É—é –º—É–∑—ã–∫—É —Ç—ã –ª—é–±–∏—à—å —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è –∏–ª–∏ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å?",
            "5. üå∏‚ùÑÔ∏è‚òÄÔ∏èüçÇ –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            "6. üßÉ –ö–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏?",
            "7. ‚úàÔ∏è –ì–¥–µ –∏ –∫–∞–∫ —Ç—ã –∏–¥–µ–∞–ª—å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–π –æ—Ç–¥—ã—Ö?",
            "8. üê∂ –ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –∑–∞–≤–µ—Å—Ç–∏ –ª—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ–≥–æ –±—ã –≤—ã–±—Ä–∞–ª?",
            "9. üéÑ –ö–∞–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–π –æ—Å–æ–±–µ–Ω–Ω—ã–π?",
            "10. üèÜ –ö–∞–∫–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∫–∞–∫ –∑—Ä–∏—Ç–µ–ª—é –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É?"
        ]

        return questions[q_num - 1] if 1 <= q_num <= 10 else "üö´ –¢–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤ –æ–ø—Ä–æ—Å–µ"

    async def _complete_survey(self, user_id: int, message: Message):
        from completion import save_answers
        session = self.user_sessions.pop(user_id, None)
        if not session:
            return

        success = await save_answers(user_id, session["answers"], "self")
        if success:
            await message.answer(
                "‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π:\n"
                f"https://t.me/vorchateg_bot?start={user_id}",
                reply_markup=main_menu
            )
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç")
